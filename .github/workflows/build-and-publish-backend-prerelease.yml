name: Build & Test Backend for Development, Publish PreRelease Version

on:
  push:
    branches:
      - dev

env:
  DOTNET_VERSION: '8.0'
  SOLUTION_PATH: 'src/Deployment.Automation.Learning.sln'
  PACKAGES_PATH: 'src'

jobs:
  build_and_test:
    runs-on: ubuntu-latest  

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_PATH }}

      - name: Build
        run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore

  publish_prerelease:
    needs: build_and_test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Find Packable Projects
        run: |
          echo "Finding projects with PackageId defined..."
          PACKABLE_PROJECTS=$(find ${{ env.PACKAGES_PATH }} -name '*.csproj' | xargs -I {} sh -c "grep -q '<PackageId>' {} && echo {}")
          echo "PACKABLE_PROJECTS<<EOF" >> $GITHUB_ENV
          echo "$PACKABLE_PROJECTS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Display packable projects
        run: |
          echo "Packable projects found:"
          echo "$PACKABLE_PROJECTS"

      - name: Pack and Push Each Project
        run: |
          for CS_PROJ in $(echo "$PACKABLE_PROJECTS"); do
            PACKAGE_ID=$(grep '<PackageId>' $CS_PROJ | sed 's/.*<PackageId>\(.*\)<\/PackageId>.*/\1/')
            PACKAGE_VERSION=$(grep '<Version>' $CS_PROJ | sed 's/.*<Version>\(.*\)<\/Version>.*/\1/' || echo "1.0.0-alpha.0")
            dotnet pack $CS_PROJ -c Release -o ./
