name: Build & Test Backend for Development, Publish PreRelease Version

on:
  push:
    branches:
      - dev
    paths:
      - 'src/**'

env:
  DOTNET_VERSION: '8.0'
  SOLUTION_PATH: 'src/Deployment.Automation.Learning.sln'
  TESTS_SOLUTION_PATH: 'test/Deployment.Automation.Learning.Tests.sln'
  PACKAGES_PATH: 'src'

jobs:
  build_and_test:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_PATH }}

      - name: Build
        run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore

      - name: Test
        run: dotnet test ${{ env.TESTS_SOLUTION_PATH }} --no-restore --no-build --verbosity normal

  publish_prerelease:
    needs: build_and_test
    timeout-minutes: 20
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Find Packable Projects
        run: |
          # Find all csproj files and check for PackageId, ensuring xargs exits successfully
          echo "Finding projects with PackageId defined..."
          PACKABLE_PROJECTS=$(find ${{ env.PACKAGES_PATH }} -name '*.csproj' -print0 | xargs -0 -I {} bash -c "grep -q '<PackageId>' {} && echo {} || true")
          echo "PACKABLE_PROJECTS<<EOF" >> $GITHUB_ENV
          echo "$PACKABLE_PROJECTS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Display packable projects
        run: |
          echo "Packable projects found:"
          echo "$PACKABLE_PROJECTS"

      - name: Pack and Push Each Project
        run: |
          for CS_PROJ in $(echo "$PACKABLE_PROJECTS")
          do
            # Correctly extract the major version from DOTNET_VERSION
            DOTNET_MAJOR_VERSION=$(echo "${{ env.DOTNET_VERSION }}" | cut -d '.' -f1)  
          
            # Get package ID
            PACKAGE_ID=$(grep '<PackageId>' $CS_PROJ | sed -n 's/.*<PackageId>\(.*\)<\/PackageId>.*/\1/p')

            # Check if the package ID was successfully extracted
            if [ -z "$PACKAGE_ID" ]; then
              echo "Skipped project because $CS_PROJ, because PackageId was not specificed"
              continue  # Skip to the next project if no Package ID found
            fi

            # Fetch latest version from NuGet
            echo "Fetching latest version for package $PACKAGE_ID from NuGet..."
            # Fetch all versions with nuget list, then narrow down to specific package
            LATEST_VERSION=$(nuget list $PACKAGE_ID -PreRelease | grep "$PACKAGE_ID" | awk '{print $2}')
            echo "Latest version fetched: $LATEST_VERSION"

            # Calculate new version
            if [ -z "$LATEST_VERSION" ]; then
              echo "No versions found on NuGet. Assigning default version..."
              NEW_VERSION="${DOTNET_MAJOR_VERSION}.0.0-alpha.0"
            else
              # Extract major, minor, and patch numbers assuming version format is semver (Major.Minor.Patch-PreRelease)
              MAJOR=$(echo $LATEST_VERSION | cut -d '.' -f1)
              MINOR=$(echo $LATEST_VERSION | cut -d '.' -f2)
              PATCH=$(echo $LATEST_VERSION | cut -d '.' -f3 | grep -o '^[0-9]*')

              # Check if the latest version is a pre-release version
              if echo $LATEST_VERSION | grep -q 'alpha'; then
                PRE_RELEASE_NUMBER=$(echo $LATEST_VERSION | grep -oP 'alpha.\K\d+')
                NEW_PRE_RELEASE_NUMBER=$((PRE_RELEASE_NUMBER + 1))
                NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}-alpha.${NEW_PRE_RELEASE_NUMBER}"
              else
                # Initialize a new pre-release version if none exists
                NEW_PATCH_NUMBER=$((PATCH + 1))
                NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH_NUMBER}-alpha.0"
              fi
            fi

            echo "New version will be $NEW_VERSION"

            # Pack the project with the new version
            echo "Packing project $CS_PROJ with version $NEW_VERSION"
            dotnet pack $CS_PROJ -c Release -o ./nupkgs /p:PackageVersion=$NEW_VERSION
    
            # Push the package to NuGet
            echo "Pushing package ${PACKAGE_ID}.${NEW_VERSION}.nupkg"
            dotnet nuget push "./nupkgs/${PACKAGE_ID}.${NEW_VERSION}.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source "https://api.nuget.org/v3/index.json" --no-service-endpoint
          done