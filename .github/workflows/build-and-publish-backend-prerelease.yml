name: Build & Test Backend for Development, Publish PreRelease Version

on:
  push:
    branches:
      - dev

env:
  DOTNET_VERSION: '8.0'
  SOLUTION_PATH: 'src/Deployment.Automation.Learning.sln'
  PACKAGES_PATH: 'src'

jobs:
  build_and_test:
    runs-on: ubuntu-latest  

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_PATH }}

      - name: Build
        run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore

  publish_prerelease:
    needs: build_and_test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Find Packable Projects
        run: |
          echo "Finding projects with PackageId defined..."
          PACKABLE_PROJECTS=$(find ${{ env.PACKAGES_PATH }} -name '*.csproj' | xargs -I {} sh -c "grep -q '<PackageId>' {} && echo {}")
          echo "PACKABLE_PROJECTS<<EOF" >> $GITHUB_ENV
          echo "$PACKABLE_PROJECTS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Display packable projects
        run: |
          echo "Packable projects found:"
          echo "$PACKABLE_PROJECTS"

      - name: Pack and Push Each Project
        run: |
          for CS_PROJ in $(echo "$PACKABLE_PROJECTS")
            do
              # Get package ID
              PACKAGE_ID=$(grep '<PackageId>' $CS_PROJ | sed -n 's/.*<PackageId>\(.*\)<\/PackageId>.*/\1/p')
              
              # Fetch the latest version from NuGet and increment it for new pre-release
              echo "Fetching latest version from NuGet for $PACKAGE_ID..."
              LATEST_VERSION=$(dotnet nuget list package versions -p $PACKAGE_ID --source https://api.nuget.org/v3/index.json | tail -1 | awk '{print $1}')
              echo "Latest version fetched: $LATEST_VERSION"

              # Extract major, minor, and pre-release components
              MAJOR=$(echo $LATEST_VERSION | cut -d '.' -f1)
              MINOR=$(echo $LATEST_VERSION | cut -d '.' -f2)
              PATCH=$(echo $LATEST_VERSION | cut -d '.' -f3 | grep -o '^[0-9]*')
            
              # Check for existing pre-release segment and increment
              PRE_RELEASE=$(echo $LATEST_VERSION | grep -oP 'alpha.\d+')
              PRE_RELEASE_NUMBER=$(echo $PRE_RELEASE | grep -oP '\d+')
              NEW_PRE_RELEASE_NUMBER=$((PRE_RELEASE_NUMBER + 1))
              NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}-alpha.${NEW_PRE_RELEASE_NUMBER}"
              echo "New version will be $NEW_VERSION"

              # Pack nuget package
              echo "Packing project $CS_PROJ with version $PACKAGE_VERSION"
              dotnet pack $CS_PROJ -c Release -o ./nupkgs /p:PackageVersion=$PACKAGE_VERSION
              echo "Pushing package ${PACKAGE_ID}.${PACKAGE_VERSION}.nupkg"

              # Pushing package to Nuget source
              dotnet nuget push "./nupkgs/${PACKAGE_ID}.${PACKAGE_VERSION}.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source "https://api.nuget.org/v3/index.json" --no-service-endpoint
            done